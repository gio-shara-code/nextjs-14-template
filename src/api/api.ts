/* tslint:disable */
/* eslint-disable */
/**
 * NestJS Backend Template
 * This is NestJS Backend Template
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration'
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios'
import globalAxios from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
    DUMMY_BASE_URL,
    assertParamExists,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    serializeDataIfNeeded,
    toPathString,
    createRequestFunction,
} from './common'
import type { RequestArgs } from './base'
// @ts-ignore
import {
    BASE_PATH,
    COLLECTION_FORMATS,
    BaseAPI,
    RequiredError,
    operationServerMap,
} from './base'

/**
 *
 * @export
 * @interface CreateUserBody
 */
export interface CreateUserBody {
    /**
     *
     * @type {string}
     * @memberof CreateUserBody
     */
    name: string
    /**
     *
     * @type {number}
     * @memberof CreateUserBody
     */
    age: number
}
/**
 *
 * @export
 * @interface CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     *
     * @type {string}
     * @memberof CreateUserResponse
     */
    id: string
}
/**
 *
 * @export
 * @interface GetUserResponse
 */
export interface GetUserResponse {
    /**
     *
     * @type {string}
     * @memberof GetUserResponse
     */
    id: string
    /**
     *
     * @type {string}
     * @memberof GetUserResponse
     */
    name: string
    /**
     *
     * @type {number}
     * @memberof GetUserResponse
     */
    age: number
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (
            options: RawAxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            const localVarPath = `/v1`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(
            options?: RawAxiosRequestConfig
        ): Promise<
            (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.appControllerGetHello(options)
            const index = configuration?.serverIndex ?? 0
            const operationBasePath =
                operationServerMap['DefaultApi.appControllerGetHello']?.[index]
                    ?.url
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration
                )(axios, operationBasePath || basePath)
        },
    }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: any): AxiosPromise<void> {
            return localVarFp
                .appControllerGetHello(options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration)
            .appControllerGetHello(options)
            .then((request) => request(this.axios, this.basePath))
    }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
    configuration?: Configuration
) {
    return {
        /**
         *
         * @param {CreateUserBody} createUserBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser: async (
            createUserBody: CreateUserBody,
            options: RawAxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'createUserBody' is not null or undefined
            assertParamExists(
                'userControllerCreateUser',
                'createUserBody',
                createUserBody
            )
            const localVarPath = `/v1/user`
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: 'POST',
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            localVarHeaderParameter['Content-Type'] = 'application/json'

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }
            localVarRequestOptions.data = serializeDataIfNeeded(
                createUserBody,
                localVarRequestOptions,
                configuration
            )

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
        /**
         *
         * @param {string | null} id
         * @param {string | null} someOtherId
         * @param {string | null} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser: async (
            id: string | null,
            someOtherId: string | null,
            userId: string | null,
            options: RawAxiosRequestConfig = {}
        ): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userControllerGetUser', 'id', id)
            // verify required parameter 'someOtherId' is not null or undefined
            assertParamExists(
                'userControllerGetUser',
                'someOtherId',
                someOtherId
            )
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('userControllerGetUser', 'userId', userId)
            const localVarPath = `/v1/user`.replace(
                `{${'userId'}}`,
                encodeURIComponent(String(userId))
            )
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
            let baseOptions
            if (configuration) {
                baseOptions = configuration.baseOptions
            }

            const localVarRequestOptions = {
                method: 'GET',
                ...baseOptions,
                ...options,
            }
            const localVarHeaderParameter = {} as any
            const localVarQueryParameter = {} as any

            if (id !== undefined) {
                localVarQueryParameter['id'] = id
            }

            if (someOtherId !== undefined) {
                localVarQueryParameter['someOtherId'] = someOtherId
            }

            setSearchParams(localVarUrlObj, localVarQueryParameter)
            let headersFromBaseOptions =
                baseOptions && baseOptions.headers ? baseOptions.headers : {}
            localVarRequestOptions.headers = {
                ...localVarHeaderParameter,
                ...headersFromBaseOptions,
                ...options.headers,
            }

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            }
        },
    }
}

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @param {CreateUserBody} createUserBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreateUser(
            createUserBody: CreateUserBody,
            options?: RawAxiosRequestConfig
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string
            ) => AxiosPromise<CreateUserResponse>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.userControllerCreateUser(
                    createUserBody,
                    options
                )
            const index = configuration?.serverIndex ?? 0
            const operationBasePath =
                operationServerMap['UserApi.userControllerCreateUser']?.[index]
                    ?.url
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration
                )(axios, operationBasePath || basePath)
        },
        /**
         *
         * @param {string | null} id
         * @param {string | null} someOtherId
         * @param {string | null} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUser(
            id: string | null,
            someOtherId: string | null,
            userId: string | null,
            options?: RawAxiosRequestConfig
        ): Promise<
            (
                axios?: AxiosInstance,
                basePath?: string
            ) => AxiosPromise<GetUserResponse>
        > {
            const localVarAxiosArgs =
                await localVarAxiosParamCreator.userControllerGetUser(
                    id,
                    someOtherId,
                    userId,
                    options
                )
            const index = configuration?.serverIndex ?? 0
            const operationBasePath =
                operationServerMap['UserApi.userControllerGetUser']?.[index]
                    ?.url
            return (axios, basePath) =>
                createRequestFunction(
                    localVarAxiosArgs,
                    globalAxios,
                    BASE_PATH,
                    configuration
                )(axios, operationBasePath || basePath)
        },
    }
}

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance
) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         *
         * @param {CreateUserBody} createUserBody
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreateUser(
            createUserBody: CreateUserBody,
            options?: any
        ): AxiosPromise<CreateUserResponse> {
            return localVarFp
                .userControllerCreateUser(createUserBody, options)
                .then((request) => request(axios, basePath))
        },
        /**
         *
         * @param {string | null} id
         * @param {string | null} someOtherId
         * @param {string | null} userId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUser(
            id: string | null,
            someOtherId: string | null,
            userId: string | null,
            options?: any
        ): AxiosPromise<GetUserResponse> {
            return localVarFp
                .userControllerGetUser(id, someOtherId, userId, options)
                .then((request) => request(axios, basePath))
        },
    }
}

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     *
     * @param {CreateUserBody} createUserBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerCreateUser(
        createUserBody: CreateUserBody,
        options?: RawAxiosRequestConfig
    ) {
        return UserApiFp(this.configuration)
            .userControllerCreateUser(createUserBody, options)
            .then((request) => request(this.axios, this.basePath))
    }

    /**
     *
     * @param {string | null} id
     * @param {string | null} someOtherId
     * @param {string | null} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userControllerGetUser(
        id: string | null,
        someOtherId: string | null,
        userId: string | null,
        options?: RawAxiosRequestConfig
    ) {
        return UserApiFp(this.configuration)
            .userControllerGetUser(id, someOtherId, userId, options)
            .then((request) => request(this.axios, this.basePath))
    }
}
